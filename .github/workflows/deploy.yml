name: Deploy to Google Cloud

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: ['20.x']

    steps:
      # Step 1: Checkout the repository
      - uses: actions/checkout@v4

      # Step 2: Set up Node.js
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      # Step 3: Install Docker Compose
      - name: Set up Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose

      # Step 4: Write the .env file from GitHub Secrets
      - name: Write .env file from GitHub Secrets
        run: |
          echo "${{ secrets.MY_ENV_FILE }}" > .env

      # Step 5: Login to Docker Hub
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Step 6: Build Docker images
      - name: Build Docker images
        run: docker-compose -f docker-compose.yml build

      # Step 7: Push Docker images to registry
      - name: Push Docker image to registry
        run: docker-compose -f docker-compose.yml push

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
      # Step 1: Checkout the repository
      - uses: actions/checkout@v4

      # Step 2: Authenticate to Google Cloud
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}

      # Step 3: Set up kubectl and configure cluster
      - name: Set up kubectl
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ secrets.PROJECT_ID }}
          cluster_name: ${{ secrets.GKE_CLUSTER_NAME }}
          location: ${{ secrets.GKE_ZONE }}
          export_default_credentials: true

      # Step 4: Ensure the namespace exists
      - name: Create Namespace if not exists
        run: |
          kubectl create namespace prod --dry-run=client -o yaml | kubectl apply -f -

      # Step 5: Deploy manifests
      - name: Apply All Manifests
        run: kubectl apply -f packaging/k8s/manifests/ -n prod
